package prototype.xd.scheduler.utilities;

import android.app.Dialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.res.Resources;
import android.view.LayoutInflater;

import androidx.annotation.ColorInt;
import androidx.annotation.ColorRes;
import androidx.annotation.IntegerRes;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.annotation.StringRes;
import androidx.fragment.app.Fragment;
import androidx.fragment.app.FragmentManager;
import androidx.lifecycle.Lifecycle;

public class ContextWrapper {
    
    private LayoutInflater layoutInflater;
    
    @NonNull
    public final Context context;
    @NonNull
    public final Lifecycle lifecycle;
    @NonNull
    public final FragmentManager fragmentManager;
    
    public ContextWrapper(@NonNull final Context context,
                          @NonNull final Lifecycle lifecycle,
                          @NonNull final FragmentManager fragmentManager) {
        this.context = context;
        this.lifecycle = lifecycle;
        this.fragmentManager = fragmentManager;
    }
    
    public static ContextWrapper from(Fragment fragment) {
        return new ContextWrapper(fragment.requireContext(), fragment.getLifecycle(), fragment.getChildFragmentManager());
    }
    
    @NonNull
    public LayoutInflater getLayoutInflater() {
        if (layoutInflater == null) {
            layoutInflater = LayoutInflater.from(context);
        }
        return layoutInflater;
    }
    
    // ------------------------ METHODS FOR LIFECYCLE PART
    
    public <T extends Dialog> T attachDialogToLifecycle(@NonNull final T dialog,
                                                        @Nullable DialogInterface.OnDismissListener dismissListener) {
        // make sure the dialog is dismissed on activity destroy
        DialogDismissObserver dismissLifecycleObserver = new DialogDismissObserver(dialog);
        lifecycle.addObserver(dismissLifecycleObserver);
        // remove the observer as soon as the dialog in dismissed
        dialog.setOnDismissListener(dialog1 -> {
            if (dismissListener != null) {
                dismissListener.onDismiss(dialog1);
            }
            lifecycle.removeObserver(dismissLifecycleObserver);
        });
        return dialog;
    }
    
    // ------------------------ METHODS FOR CONTEXT PART
    
    /**
     * Returns a localized string from the application's package's
     * default string table.
     *
     * @param resId Resource id for the string
     * @return The string data associated with the resource, stripped of styled
     * text information.
     */
    @NonNull
    public final String getString(@StringRes int resId) {
        return context.getResources().getString(resId);
    }
    
    /**
     * Returns a localized formatted string from the application's package's
     * default string table, substituting the format arguments as defined in
     * {@link java.util.Formatter} and {@link java.lang.String#format}.
     *
     * @param resId      Resource id for the format string
     * @param formatArgs The format arguments that will be used for
     *                   substitution.
     * @return The string data associated with the resource, formatted and
     * stripped of styled text information.
     */
    @NonNull
    public final String getString(@StringRes int resId, Object... formatArgs) {
        return context.getResources().getString(resId, formatArgs);
    }
    
    /**
     * Return an integer associated with a particular resource ID.
     *
     * @param resId The desired resource identifier, as generated by the aapt
     *              tool. This integer encodes the package, type, and resource
     *              entry. The value 0 is an invalid identifier.
     * @return Returns the integer value contained in the resource.
     * @throws Resources.NotFoundException Throws NotFoundException if the given ID does not exist.
     */
    public int getInteger(@IntegerRes int resId) throws Resources.NotFoundException {
        return context.getResources().getInteger(resId);
    }
    
    /**
     * Returns a color associated with a particular resource ID and styled for
     * the current theme.
     *
     * @param id The desired resource identifier, as generated by the aapt
     *           tool. This integer encodes the package, type, and resource
     *           entry. The value 0 is an invalid identifier.
     * @return A single color value in the form 0xAARRGGBB.
     * @throws android.content.res.Resources.NotFoundException if the given ID
     *                                                         does not exist.
     */
    @ColorInt
    public final int getColor(@ColorRes int id) {
        return context.getResources().getColor(id, context.getTheme());
    }
}
